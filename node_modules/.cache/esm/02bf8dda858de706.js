let Joi,bcrypt,User,CustomErrorHandler;_858‍.x([["default",()=>_858‍.o]]);_858‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_858‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_858‍.w("../../Models",[["User",["User"],function(v){User=v}]]);_858‍.w("../../service/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);




const registerController = {
  async register(req, res, next) {
    // Validation
    const registerSchema = Joi.object({
      name: Joi.string().min(3).max(30).required(),
      email: Joi.string().email().required(),
      password: Joi.string()
        .pattern(new RegExp(/.{3,30}/))
        .required(),
    });
    const { error } = registerSchema.validate(req.body);
    if (error) {
      return next(error);
    }
    // check if user is in the database already
    try {
      const exist = await User.exists({ email: req.body.email });
      if (exist) {
        return next(
          CustomErrorHandler.alreadyExist("This email is already taken.")
        );
      }
    } catch (err) {
      return next(err);
    }
    const { name, email, password } = req.body;

    // Hash password
    const hashedPassword = await bcrypt.hash(password, 10);

    // prepare the model

    const user = new User({
      name,
      email,
      password: hashedPassword,
    });
    try {
      const result = await user.save();
      _858‍.g.console.log(result);
    } catch (err) {
      return next(err);
    }
    res.json({ user });
  },
};

_858‍.d(registerController);
